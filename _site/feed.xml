<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://yzsever.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://yzsever.github.io/" rel="alternate" type="text/html" /><updated>2020-12-31T15:10:39+08:00</updated><id>https://yzsever.github.io/feed.xml</id><title type="html">成长笔记</title><subtitle>一个人最了不起的成就，就是找到自己，然后勇敢做自己。</subtitle><author><name>Jenson</name></author><entry><title type="html">Java工程师推荐书单</title><link href="https://yzsever.github.io/java/java-read-list/" rel="alternate" type="text/html" title="Java工程师推荐书单" /><published>2020-12-31T15:10:00+08:00</published><updated>2020-12-31T15:10:00+08:00</updated><id>https://yzsever.github.io/java/java-read-list</id><content type="html" xml:base="https://yzsever.github.io/java/java-read-list/">&lt;h4 id=&quot;基础入门&quot;&gt;基础入门&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Java编程思想(Thinking in Java)&lt;/li&gt;
  &lt;li&gt;Java核心技术(Core Java)&lt;/li&gt;
  &lt;li&gt;Java8 实战(Java in action)&lt;/li&gt;
  &lt;li&gt;Effective Java中文版&lt;/li&gt;
  &lt;li&gt;代码大全&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;框架入门与深入&quot;&gt;框架入门与深入&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Spring实战(Spring in action)&lt;/li&gt;
  &lt;li&gt;Hibernate实战（Java Persistence with Hibernate）&lt;/li&gt;
  &lt;li&gt;深入分析Java Web技术内幕&lt;/li&gt;
  &lt;li&gt;互联网轻量级SSM框架解密&lt;/li&gt;
  &lt;li&gt;MyBatis 3源码深度解析&lt;/li&gt;
  &lt;li&gt;Spring技术内幕&lt;/li&gt;
  &lt;li&gt;Spring Boot技术内幕&lt;/li&gt;
  &lt;li&gt;Spring微服务实战&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;nio与并发编程&quot;&gt;NIO与并发编程&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Java并发编程实战（Java Concurrency in Practice）&lt;/li&gt;
  &lt;li&gt;Java并发编程的艺术&lt;/li&gt;
  &lt;li&gt;Java异步编程实战&lt;/li&gt;
  &lt;li&gt;Netty实战&lt;/li&gt;
  &lt;li&gt;Netty权威指南&lt;/li&gt;
  &lt;li&gt;NIO与Socket编程技术指南&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;jvm与性能&quot;&gt;JVM与性能&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;深入理解Java虚拟机&lt;/li&gt;
  &lt;li&gt;深入理解JVM字节码&lt;/li&gt;
  &lt;li&gt;Java性能优化权威指南&lt;/li&gt;
  &lt;li&gt;Java性能权威指南&lt;/li&gt;
  &lt;li&gt;性能之巅&lt;/li&gt;
  &lt;li&gt;高可用MySQL&lt;/li&gt;
  &lt;li&gt;高性能MySQL&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;分布式与中间件&quot;&gt;分布式与中间件&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;分布式系统：概念与设计&lt;/li&gt;
  &lt;li&gt;分布式消息中间件实践&lt;/li&gt;
  &lt;li&gt;分布式系统应用设计&lt;/li&gt;
  &lt;li&gt;数据密集型应用系统设计&lt;/li&gt;
  &lt;li&gt;分布式服务架构：原理、设计与实战&lt;/li&gt;
  &lt;li&gt;分布式系统架构&lt;/li&gt;
  &lt;li&gt;深入分布式缓存：从原理到实践&lt;/li&gt;
  &lt;li&gt;Kafka权威指南&lt;/li&gt;
  &lt;li&gt;深入理解Kafka：核心设计与实践原理&lt;/li&gt;
  &lt;li&gt;Apache Kafka源码剖析&lt;/li&gt;
  &lt;li&gt;RocketMQ技术内幕：RocketMQ架构设计与实现原理&lt;/li&gt;
  &lt;li&gt;深度剖析Apache Dubbo核心技术内幕&lt;/li&gt;
  &lt;li&gt;Redis实战&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;架构设计与互联网技术&quot;&gt;架构设计与互联网技术&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;系统架构：复杂系统的产品设计与开发&lt;/li&gt;
  &lt;li&gt;软件架构&lt;/li&gt;
  &lt;li&gt;分布式系统架构：技术栈详解与快速进阶&lt;/li&gt;
  &lt;li&gt;亿级流量网站架构核心技术&lt;/li&gt;
  &lt;li&gt;京东基础架构建设之路&lt;/li&gt;
  &lt;li&gt;企业IT架构转型之道 阿里巴巴中台战略思想与架构实战&lt;/li&gt;
  &lt;li&gt;高可用架构&lt;/li&gt;
  &lt;li&gt;高可用可伸缩微服务架构：基于Dubbo、Spring Cloud和Service Mesh&lt;/li&gt;
  &lt;li&gt;架构之美&lt;/li&gt;
  &lt;li&gt;架构简介之道&lt;/li&gt;
  &lt;li&gt;大型网站技术架构演进与性能优化&lt;/li&gt;
  &lt;li&gt;发布！设计与部署稳定的分布式系统&lt;/li&gt;
  &lt;li&gt;微服务架构设计模式&lt;/li&gt;
  &lt;li&gt;微服务设计&lt;/li&gt;
  &lt;li&gt;生产微服务&lt;/li&gt;
  &lt;li&gt;软件系统架构：使用视点和视角与利益相关者合&lt;/li&gt;
  &lt;li&gt;DevOps 软件架构师行动指南&lt;/li&gt;
  &lt;li&gt;DevOps 实践指南&lt;/li&gt;
  &lt;li&gt;企业应用架构模式&lt;/li&gt;
  &lt;li&gt;企业集成模式&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;图解设计模式&lt;/li&gt;
  &lt;li&gt;图解HTTP协议&lt;/li&gt;
  &lt;li&gt;图解性能优化&lt;/li&gt;
  &lt;li&gt;重构：改善既有代码的设计&lt;/li&gt;
  &lt;li&gt;混沌工程，深入理解计算机系统&lt;/li&gt;
  &lt;li&gt;数据库全书&lt;/li&gt;
  &lt;li&gt;虚拟机：系统与进程的通用平台&lt;/li&gt;
  &lt;li&gt;程序员的职业素养&lt;/li&gt;
  &lt;li&gt;数学之美&lt;/li&gt;
  &lt;li&gt;算法之美&lt;/li&gt;
  &lt;li&gt;系统之美&lt;/li&gt;
  &lt;li&gt;计算进化史&lt;/li&gt;
  &lt;li&gt;人月神话&lt;/li&gt;
  &lt;li&gt;编程珠玑&lt;/li&gt;
  &lt;li&gt;高效程序员的45个习惯：敏捷开发修炼之道&lt;/li&gt;
  &lt;li&gt;算法导论&lt;/li&gt;
  &lt;li&gt;计算机程序设计艺术&lt;/li&gt;
  &lt;li&gt;程序员修炼之道&lt;/li&gt;
  &lt;li&gt;有效的单元测试&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;致谢&quot;&gt;致谢&lt;/h4&gt;
&lt;p&gt;感谢KimmKing老师提供的这份书单。&lt;/p&gt;</content><author><name>Jenson</name></author><category term="JAVA" /><summary type="html">基础入门</summary></entry><entry><title type="html">Mysql慢查询优化——IN查询不走索引</title><link href="https://yzsever.github.io/mysql/mysqlslowquery-in/" rel="alternate" type="text/html" title="Mysql慢查询优化——IN查询不走索引" /><published>2020-12-28T10:00:00+08:00</published><updated>2020-12-28T10:00:00+08:00</updated><id>https://yzsever.github.io/mysql/mysqlslowquery-in</id><content type="html" xml:base="https://yzsever.github.io/mysql/mysqlslowquery-in/">&lt;h2 id=&quot;问题背景&quot;&gt;问题背景&lt;/h2&gt;

&lt;p&gt;最近优化慢查询时，发现由于业务的变更，之前不常用的字段作为了查询条件，慢查询日志中的rows达到了18万行，因为没有索引，所以进行了全表扫描。顾采取策略为改查询字段添加索引。添加索引后，使用explain分析语句，显示会使用索引。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;业务修改时，业务人员撰写新SQL后，一定要使用explain命令进行评估。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;索引上线后，过了一天再查看慢查询日志，发现该慢查询依然在列，依然全局扫描。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MySQL使用引擎InnoDB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;问题分析&quot;&gt;问题分析&lt;/h2&gt;
&lt;p&gt;首先猜测一下可能是什么问题导致的：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;索引没有上？ -&amp;gt; 和运维人员确认后排除&lt;/li&gt;
  &lt;li&gt;SQL语句中使用了IN语句，IN语句可能会使用不到索引？ -&amp;gt; 发现了optimizer会先分析选择使用索引还是全表扫描&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;立马google找到一个相关问题，&lt;a href=&quot;https://stackoverflow.com/questions/586381/mysql-not-using-indexes-with-where-in-clause&quot;&gt;MySQL not using indexes with WHERE IN clause?&lt;/a&gt;。先简单复述一下高票回答：Mysql中有一个优化器(optimizer)，在选择执行方案时，需要根据分析数据表(analyze table)的结果来选择最优的执行方案。分析数据正确的话，可以取得很好的效果，反之则需要重新分析数据表更正数据。如果在更正后分析数据后的性能你仍然不满意的话，可以使用强制使用索引的方法(force index)。&lt;/p&gt;

&lt;p&gt;总而言之，Mysql优化器认为全表扫描比使用索引更快，帮我做了更好的选择，如果你实在想用索引，那就强制使用索引吧！&lt;/p&gt;

&lt;p&gt;那么问题来了：全表扫描真的比索引更快嘛？&lt;/p&gt;

&lt;h3 id=&quot;全表扫描真的比索引更快嘛&quot;&gt;全表扫描真的比索引更快嘛？&lt;/h3&gt;

&lt;p&gt;MySQL的查询优化器会通过两个API来了解存储引擎的索引值的分布信息，以决定如何使用索引。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;第一个API是records_in_range()，通过向存储引擎传入两个边界值获取在这个范围大概有多少条记录。对于某些存储引擎，该接口返回精确值，例如MyISAM；但对于另一些存储引擎则是一个&lt;strong&gt;估算值&lt;/strong&gt;，例如InnoDB。&lt;/li&gt;
  &lt;li&gt;第二个API是info()，该接口返回各种类型的数据，包括&lt;strong&gt;索引的基数(每个键值有多少条记录)&lt;/strong&gt;。
如果存储引擎向优化器提供的扫描行数信息是不准确的数据，或者执行计划本身太复杂以致无法准确地获取各个阶段匹配的行数，那么优化器会使用索引统计信息来估算扫描行数。MySQL优化器使用的是&lt;strong&gt;基于成本的模型&lt;/strong&gt;，而衡量成本的主要指标就是&lt;strong&gt;一个查询需要扫描多少行&lt;/strong&gt;。如果表没有统计信息，或者统计信息不准确，优化器就很有可能做出错误的决定。可以通过运行ANALYE TABLE来重新生成统计信息解决这个问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;索引的基数cardinality&quot;&gt;索引的基数(Cardinality)&lt;/h4&gt;
&lt;p&gt;直到MySQL 5.5版本，InnoDB也不在磁盘存储索引统计信息，而是通过随机的索引访问进行评估并将其存储在内存中。可以使用SHOW INDEX FROM命令来查看索引的基数(Cardinality)。索引列的基数(Cardinality)显示了存储引擎估算索引列有多少个不同的取值。InnoDB引擎通过抽样的方式来计算统计信息&lt;strong&gt;(估算值)&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;何时维护呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对InnoDB存储引擎而言，以下时候会计算索引的统计信息。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;表首次打开&lt;/li&gt;
  &lt;li&gt;执行ANALYZE TABLE&lt;/li&gt;
  &lt;li&gt;表的大小发生非常大的变化(大小变化超过十六分之一或者新插入了20亿行都会触发)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是呢，还有另外一些时刻也会触发统计信息的更新：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;打开某些INFOMATION_SCHEMA表&lt;/li&gt;
  &lt;li&gt;使用SHOW TABLE STATUS和SHOW INDEX&lt;/li&gt;
  &lt;li&gt;在MySQL客户端开启自动补全功能的时候
如果服务器上有大量的数据，这可能就是个很严重的问题，尤其是当I/O比较慢的时候。客户端或者监控程序触发索引信息采集更新时可能会导致大量的锁，并给服务器带来很多的额外压力，这会让用户因为启动时间漫长而沮丧。所以，我们可以关闭&lt;strong&gt;innodb_stats_on+metadata&lt;/strong&gt;参数来避免上面提到的问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;言归正传，所以索引的基数(Cardinality)是优化器调用了两个API来决定如何使用索引：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;第一个API是records_in_range()，实际的SQL中传参的最大值和最小值相差1471。&lt;/li&gt;
  &lt;li&gt;第二个API是info()，实际MySQL中的Cardinality只有3000-4000。
那么问题找到了，是Cardinality的值太小，对于18万行数据来说，这个区分度很小，说明还有很多重复的值。即使使用的索引，还需要进一步的区分才能找到正确的值。所以优化器觉得全表扫描花的成本更低。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;确认Cardinality的正确性&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用ANALYZE TABLE tablename更新，查看后数据没变，所以数据正确。&lt;/p&gt;

&lt;h4 id=&quot;结论&quot;&gt;结论&lt;/h4&gt;

&lt;p&gt;由于该查询字段是后期新加并使用的字段，该数据为选填数据，所以存在很多值为0的数据。而使用时，并不会用到为0的数据，实际上使用索引还是最优的选择。最终，采用FORCE INDEX的手段使用索引。&lt;/p&gt;

&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/table-scan-avoidance.html&quot;&gt;Mysql 5.7 doc#8.2.1.20 Avoiding Full Table Scans&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html&quot;&gt;Mysql 5.7 doc#5.1.7 Server System Variables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/show-index.html&quot;&gt;Mysql 5.7 doc#13.7.5.22 SHOW INDEX Statement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/analyze-table.html&quot;&gt;Mysql 5.7 doc#13.7.2.1 ANALYZE TABLE Statement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/jpfss/p/9176142.html&quot;&gt;Mysql如何避免全表扫描的方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://anmh.wordpress.com/2010/07/16/mysql%EF%BC%9Amax_seeks_for_key%E7%9A%84%E8%AE%BE%E7%BD%AE/&quot;&gt;Mysql：max_seeks_for_key参数的设置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;高性能MySQL第3版 Page188&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Jenson</name></author><category term="Mysql" /><summary type="html">问题背景</summary></entry><entry><title type="html">Mysql慢查询优化总览</title><link href="https://yzsever.github.io/mysql/mysqlslowquery/" rel="alternate" type="text/html" title="Mysql慢查询优化总览" /><published>2020-12-28T10:00:00+08:00</published><updated>2020-12-28T10:00:00+08:00</updated><id>https://yzsever.github.io/mysql/mysqlslowquery</id><content type="html" xml:base="https://yzsever.github.io/mysql/mysqlslowquery/">&lt;p&gt;大厂的工作流程是业务人员完成业务开发中的sql语句后，由DBA对sql语句进行优化，最后进行上线。但是没有DBA的小厂，这部分需要开发人员掌握。Mysql作为系统的IO操作，一直是业务系统优化的大头。当系统的API调用过慢时，首先根据二八定律确定大量时间花在了什么地方，然后再对时间大头进行优化。在这个过程中，大多数会发现是mysql语句执行过慢的原因。&lt;/p&gt;

&lt;h3 id=&quot;sql语句执行过慢的原因&quot;&gt;Sql语句执行过慢的原因&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;全表扫描，未使用索引&lt;/li&gt;
  &lt;li&gt;使用了索引，但是备选数据量太多&lt;/li&gt;
  &lt;li&gt;使用IN查询，条件太多不走索引&lt;/li&gt;
  &lt;li&gt;过多的表关联查询&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Jenson</name></author><category term="Mysql" /><summary type="html">大厂的工作流程是业务人员完成业务开发中的sql语句后，由DBA对sql语句进行优化，最后进行上线。但是没有DBA的小厂，这部分需要开发人员掌握。Mysql作为系统的IO操作，一直是业务系统优化的大头。当系统的API调用过慢时，首先根据二八定律确定大量时间花在了什么地方，然后再对时间大头进行优化。在这个过程中，大多数会发现是mysql语句执行过慢的原因。</summary></entry><entry><title type="html">基于Docker搭建Mysql主从复制环境</title><link href="https://yzsever.github.io/mysql/mysql-replica/" rel="alternate" type="text/html" title="基于Docker搭建Mysql主从复制环境" /><published>2020-12-27T19:45:00+08:00</published><updated>2020-12-27T19:45:00+08:00</updated><id>https://yzsever.github.io/mysql/mysql-replica</id><content type="html" xml:base="https://yzsever.github.io/mysql/mysql-replica/">&lt;h2 id=&quot;一阿里云和docker搭建主从服务器&quot;&gt;一、阿里云和Docker搭建主从服务器&lt;/h2&gt;
&lt;p&gt;1、阿里云环境为centos，首先安装docker&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# yum install docker-ce-3:19.03.13-3.el8 -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2、然后拉取docker镜像，这里使用5.7版本的mysql：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# docker pull mysql:5.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3、使用此镜像启动容器，这里需要分别启动主从两个容器&lt;/p&gt;

&lt;p&gt;Master(主)：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# docker run -p 3309:3306 --name primary -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Slave(从)：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# docker run -p 3308:3306 --name secondary -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;primary对外映射的端口是3309，secondary对外映射的端口是3308。使用docker ps命令查看正在运行的容器：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
c2e509a41b29        mysql:5.7           &quot;docker-entrypoint.s…&quot;   3 weeks ago         Up 2 weeks          33060/tcp, 0.0.0.0:3308-&amp;gt;3306/tcp   secondary
ec4a868c061d        mysql:5.7           &quot;docker-entrypoint.s…&quot;   3 weeks ago         Up 2 weeks          33060/tcp, 0.0.0.0:3309-&amp;gt;3306/tcp   primary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;4、容器中Mysql测试：使用主宿主机IP:3309,和主宿主机IP:3308连接Mysql，能够连通则第一步成功。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# mysql -h 主宿主机IP -P 3309 -uroot -p123456 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;阿里云需要配置暴露端口规则暴露3308和3309端口&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;二配置主数据库primary&quot;&gt;二、配置主数据库(primary)&lt;/h2&gt;
&lt;p&gt;1、进入到primary容器内部，修改mysql的配置文件my.cnf，配置server-id。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# docker exec -it ec4 /bin/bash
root@ec4a868c061d:/# apt-get update
root@ec4a868c061d:/# apt-get install vim
root@ec4a868c061d:/# cd /etc/mysql
root@ec4a868c061d:/# vim my.cnf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;my.cnf的内容如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[mysqld]
## 同一局域网内注意要唯一
server-id=100  
## 开启二进制日志功能，可以随便取（关键）
log-bin=mysql-bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;配置完成之后，需要重启mysql服务使配置生效。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ec4a868c061d:/# service mysql restart
~# docker start ec4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2、在primary数据库创建数据同步用户，授予用户slave REPLICATION SLAVE权限和REPLICATION CLIENT权限，用于在主从库之间同步数据。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ec4a868c061d:/# mysql -uroot -p123456
mysql&amp;gt; flush privileges; 
mysql&amp;gt; CREATE USER 'secondary'@'%' IDENTIFIED BY '123456';
mysql&amp;gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'secondary'@'%';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;(创建用户前先刷新一下权限，不然可能报错。参考：https://blog.csdn.net/u011575570/article/details/51438841)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;三配置从数据库secondary&quot;&gt;三、配置从数据库(secondary)&lt;/h2&gt;

&lt;p&gt;和配置主数据库一样，配置文件my.cnf中添加如下配置：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[mysqld]
## 设置server_id,注意要唯一
server-id=101  
## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用
log-bin=mysql-slave-bin   
## relay_log配置中继日志
relay_log=edu-mysql-relay-bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置完成后也需要重启mysql服务和docker容器。&lt;/p&gt;

&lt;h2 id=&quot;四开启主从复制&quot;&gt;四、开启主从复制&lt;/h2&gt;
&lt;p&gt;1、在Primary进入mysql，执行show master status;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; show master status;
+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000007 |     4638 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;File和Position字段的值后面将会用到，在后面的操作完成之前，需要保证Master库不能做任何操作，否则将会引起状态变化，File和Position字段的值变化。&lt;/p&gt;

&lt;p&gt;2、查看主数据库Primary容器的IP地址&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# docker inspect --format='' ec4
172.17.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3、在从数据库中进入mysql，设置master信息&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; change master to master_host='172.17.0.2', master_user='secondary', master_password='123456', master_port=3306, master_log_file='mysql-bin.000007', master_log_pos= 4638, master_connect_retry=30;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;4、查看主从复制的状态：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 172.17.0.2
                  Master_User: secondary
                  Master_Port: 3306
                Connect_Retry: 30
              Master_Log_File: mysql-bin.000007
          Read_Master_Log_Pos: 4638
               Relay_Log_File: edu-mysql-relay-bin.000002
                Relay_Log_Pos: 320
        Relay_Master_Log_File: mysql-bin.000007
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB: 
          Replicate_Ignore_DB: 
           Replicate_Do_Table: 
       Replicate_Ignore_Table: 
      Replicate_Wild_Do_Table: 
  Replicate_Wild_Ignore_Table: 
                   Last_Errno: 0
                   Last_Error: 
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 4638
              Relay_Log_Space: 531
              Until_Condition: None
               Until_Log_File: 
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File: 
           Master_SSL_CA_Path: 
              Master_SSL_Cert: 
            Master_SSL_Cipher: 
               Master_SSL_Key: 
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error: 
               Last_SQL_Errno: 0
               Last_SQL_Error: 
  Replicate_Ignore_Server_Ids: 
             Master_Server_Id: 1001
                  Master_UUID: c413bb6f-36ed-11eb-b373-0242ac110002
             Master_Info_File: /var/lib/mysql/master.info
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates
           Master_Retry_Count: 86400
                  Master_Bind: 
      Last_IO_Error_Timestamp: 
     Last_SQL_Error_Timestamp: 
               Master_SSL_Crl: 
           Master_SSL_Crlpath: 
           Retrieved_Gtid_Set: 
            Executed_Gtid_Set: 
                Auto_Position: 0
         Replicate_Rewrite_DB: 
                 Channel_Name: 
           Master_TLS_Version: 
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;注意其中两个状态，如果两个都是Yes，则说明环境搭建完成。如果不是，请关注错误信息字段：Last_IO_Error&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Slave_IO_Running: Yes
Slave_SQL_Running: Yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;五花式掉坑&quot;&gt;五、花式掉坑&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;最后一步查看show slave status状态时，Slave_IO_Running显示为Connecting，Last_IO_Error错误信息提示连接不到主数据库。
    &lt;ul&gt;
      &lt;li&gt;这个时候连接是通过docker容器的内网，理论上不会出现问题。但是，在容器中执行apt-get update的时候就一直显示连不上网，很是奇怪。最后经过层层排查，是docker本身的问题。所以卸载了docker，换版本后制定版本安装docker，最后问题解决。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/linjiaxin/p/12761296.html&quot;&gt;基于Docker的Mysql主从复制搭建&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Jenson</name></author><category term="Mysql" /><summary type="html">一、阿里云和Docker搭建主从服务器 1、阿里云环境为centos，首先安装docker ~# yum install docker-ce-3:19.03.13-3.el8 -y</summary></entry><entry><title type="html">Hello World!</title><link href="https://yzsever.github.io/%E5%85%B6%E4%BB%96/helloworld/" rel="alternate" type="text/html" title="Hello World!" /><published>2020-12-24T14:51:55+08:00</published><updated>2020-12-24T14:51:55+08:00</updated><id>https://yzsever.github.io/%E5%85%B6%E4%BB%96/helloworld</id><content type="html" xml:base="https://yzsever.github.io/%E5%85%B6%E4%BB%96/helloworld/">&lt;p&gt;很开心能够搭建自己的博客，记录生活学习中值得记录的东西。&lt;/p&gt;</content><author><name>Jenson</name></author><category term="其他" /><summary type="html">很开心能够搭建自己的博客，记录生活学习中值得记录的东西。</summary></entry></feed>